# -*- coding: utf-8 -*-
"""
Optimization Final Group Project
Team 22
Frank Wan, Fares Sukkar, Spencer Tsai, Zach Washburn
"""

import gurobipy as gp
from gurobipy import GRB
#from gurobipy import *

###########################################################
##################### Data sets ###########################

capacity = [16000, 12000, 14000, 10000, 13000]
Year=[1,2,3,4,5,6,7,8,9,10]
PlantWHCost=[[[0.120,0.124,0.131,0.143,0.161,0.187,0.223,0.275,0.348,0.454],
              [0.130,0.134,0.142,0.155,0.175,0.203,0.242,0.297,0.377,0.492],
              [0.080,0.082,0.087,0.096,0.108,0.125,0.149,0.183,0.232,0.303],
              [0.050,0.052,0.055,0.060,0.067,0.078,0.093,0.114,0.145,0.189]],
             [[0.1,0.103,0.1092727,0.11940523,0.134391638,0.155796742,0.186029457,0.228792768,0.289827833,0.378159584],
              [0.03,0.0309,0.03278181,0.035821569,0.040317491,0.046739022,0.055808837,0.06863783,0.08694835,0.113447875],
              [0.1,0.103,0.1092727,0.11940523,0.134391638,0.155796742,0.186029457,0.228792768,0.289827833,0.378159584],
              [0.09,0.0927,0.09834543,0.107464707,0.120952474,0.140217067,0.167426511,0.205913491,0.26084505,0.340343626]],
             [[0.05,0.0515,0.05463635,0.059702615,0.067195819,0.077898371,0.093014729,0.114396384,0.144913916,0.189079792],
              [0.07,0.0721,0.07649089,0.083583661,0.094074147,0.109057719,0.13022062,0.160154937,0.202879483,0.264711709],
              [0.06,0.0618,0.06556362,0.071643138,0.080634983,0.093478045,0.111617674,0.137275661,0.1738967,0.22689575],
              [0.03,0.0309,0.03278181,0.035821569,0.040317491,0.046739022,0.055808837,0.06863783,0.08694835,0.113447875]],
             [[0.06,0.0618,0.06556362,0.071643138,0.080634983,0.093478045,0.111617674,0.137275661,0.1738967,0.22689575],
              [0.03,0.0309,0.03278181,0.035821569,0.040317491,0.046739022,0.055808837,0.06863783,0.08694835,0.113447875],
              [0.07,0.0721,0.07649089,0.083583661,0.094074147,0.109057719,0.13022062,0.160154937,0.202879483,0.264711709],
              [0.07,0.0721,0.07649089,0.083583661,0.094074147,0.109057719,0.13022062,0.160154937,0.202879483,0.264711709]],
             [[0.06,0.0618,0.06556362,0.071643138,0.080634983,0.093478045,0.111617674,0.137275661,0.1738967,0.22689575],
              [0.02,0.0206,0.02185454,0.023881046,0.026878328,0.031159348,0.037205891,0.045758554,0.057965567,0.075631917],
              [0.04,0.0412,0.04370908,0.04776209,0.053756655,0.062318697,0.074411783,0.091517107,0.115931133,0.151263834],
              [0.08,0.0824,0.08741816,0.095524184,0.10751331,0.124637393,0.148823566,0.183034214,0.231862266,0.302527667]]]

WHRetailCost= [[[0.09, 0.0927, 0.09834543, 0.107464707, 0.120952474, 0.140217067, 0.167426511, 0.205913491, 0.26084505, 0.340343626],
                [0.1, 0.103, 0.1092727, 0.11940523, 0.134391638, 0.155796742, 0.186029457, 0.228792768, 0.289827833, 0.378159584],
                [0.06, 0.0618, 0.06556362, 0.071643138, 0.080634983, 0.093478045, 0.111617674, 0.137275661, 0.1738967, 0.22689575],
                [0.05, 0.0515, 0.05463635, 0.059702615, 0.067195819, 0.077898371, 0.093014729, 0.114396384, 0.144913916, 0.189079792],
                [0.08, 0.0824, 0.08741816, 0.095524184, 0.10751331, 0.124637393, 0.148823566	, 0.183034214	, 0.231862266, 0.302527667],
                [0.09, 0.0927, 0.09834543, 0.107464707, 0.120952474, 0.140217067, 0.167426511, 0.205913491, 0.26084505, 0.340343626],
                [0.02, 0.0206, 0.02185454, 0.023881046, 0.026878328, 0.031159348, 0.037205891, 0.045758554, 0.057965567, 0.075631917],
                [0.12, 0.1236, 0.13112724, 0.143286276, 0.161269966, 0.18695609, 0.223235349, 0.274551321, 0.347793399, 0.453791501]],
               [[0.05, 0.0515, 0.05463635, 0.059702615, 0.067195819, 0.077898371, 0.093014729, 0.114396384, 0.144913916, 0.189079792],
                [0.07, 0.0721, 0.07649089, 0.083583661, 0.094074147, 0.109057719, 0.13022062, 0.160154937, 0.202879483, 0.264711709],
                [0.12, 0.1236, 0.13112724, 0.143286276, 0.161269966, 0.18695609, 0.223235349, 0.274551321, 0.347793399, 0.453791501], 
                [0.04, 0.0412, 0.04370908, 0.047762092, 0.053756655, 0.062318697, 0.074411783, 0.091517107, 0.115931133, 0.151263834],
                [0.03, 0.0309, 0.03278181, 0.035821569, 0.040317491, 0.046739022, 0.055808837, 0.06863783, 0.08694835, 0.113447875],
                [0.09, 0.0927, 0.09834543, 0.107464707, 0.120952474, 0.140217067, 0.167426511, 0.205913491, 0.26084505, 0.340343626],
                [0.03, 0.0309, 0.03278181, 0.035821569, 0.040317491, 0.046739022, 0.055808837, 0.06863783, 0.08694835, 0.113447875],
                [0.08, 0.0824, 0.08741816, 0.095524184, 0.10751331, 0.124637393, 0.148823566, 0.183034214, 0.231862266, 0.302527667]],
               [[0.06, 	0.0618,	0.06556362,	0.071643138,0.080634983,	0.093478045,0.111617674,	0.137275661,0.1738967,	0.22689575],
                [0.09,	0.0927,	0.09834543,	0.107464707,0.120952474,	0.140217067,0.167426511,	0.205913491,0.26084505,	0.340343626],
                [0.07,	0.0721,	0.07649089,	0.083583661,0.094074147,	0.109057719,0.13022062,	0.160154937,0.202879483,	0.264711709],
                [0.09,	0.0927,	0.09834543,	0.107464707,0.120952474,	0.140217067,0.167426511,	0.205913491,0.26084505,	0.340343626],
                [0.09,	0.0927,	0.09834543,	0.107464707,0.120952474,	0.140217067,0.167426511,	0.205913491,0.26084505,	0.340343626],
                [0.04,	0.0412,	0.04370908,	0.047762092,0.053756655,	0.062318697,0.074411783,	0.091517107,0.115931133,	0.151263834],
                [0.11,	0.1133,	0.12019997,	0.131345753,0.147830802,	0.171376416,0.204632403,	0.251672044,0.318810616,	0.415975543],
                [0.07,	0.0721,	0.07649089,	0.083583661,0.094074147,	0.109057719,0.13022062,	0.160154937,0.202879483,	0.264711709]],
               [[0.07,	0.0721,	0.07649089,	0.083583661,0.094074147,	0.109057719,0.13022062,	0.160154937,0.202879483,	0.264711709],
                [0.08,	0.0824,	0.08741816,	0.095524184,0.10751331,	0.124637393,0.148823566,	0.183034214,0.231862266,	0.302527667],
                [0.09,	0.0927,	0.09834543,	0.107464707,0.120952474,	0.140217067,0.167426511,	0.205913491,0.26084505,	0.340343626],
                [0.06,	0.0618,	0.06556362,	0.071643138,0.080634983,	0.093478045,0.111617674,	0.137275661,0.1738967,	0.22689575],
                [0.1,   0.103,	0.1092727,	0.11940523,	0.134391638,0.155796742,	0.186029457,0.228792768,	0.289827833,0.378159584],
                [0.07,	0.0721,	0.07649089,	0.083583661,0.094074147,	0.109057719,0.13022062,	0.160154937,0.202879483,	0.264711709],
                [0.06,	0.0618,	0.06556362,	0.071643138,0.080634983,	0.093478045,0.111617674,	0.137275661,0.1738967,	0.22689575],
                [0.09,	0.0927,	0.09834543,	0.107464707,0.120952474,	0.140217067,0.167426511,	0.205913491,0.26084505,	0.340343626]]]

Demand = [[1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800],
          [1200, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360],
          [1800, 2250, 2700, 3150, 3600, 4050, 4500, 4950, 5400, 5850],
          [1200, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360],
          [1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800],
          [1400, 1750, 2100, 2450, 2800, 3150, 3500, 3850, 4200, 4550],
          [1600, 2000, 2400, 2800, 3200, 3600, 4000, 4400, 4800, 5200],
          [1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800]]

Shutdown = [[170,175,186,203,228,264,315,387,490,639],
            [120,124,132,144,162,188,224,275,348,454],
            [130,134,142,155,174,202,241,296,375,489],
            [ 80, 82, 87, 95,107,124,148,182,231,301],
            [110,113,120,131,147,170,203,250,317,414]]

Construction =[[2000,2060,2185,2388,2688,3116,3721,4576,5797,7564],
              [1600,1648,1748,1910,2150,2492,2976,3660,4636,6049],
              [1800,1854,1967,2149,2419,2804,3348,4118,5217,6807],
              [ 900, 927, 983,1074,1209,1402,1674,2059,2608,3403],
              [1500,1545,1639,1791,2016,2337,2791,3433,4349,5674]]

Operating =   [[420,433,459,502,565,655,782,962,1219,1591],
               [380,391,415,453,510,591,706,868,1100,1435],
               [460,474,503,550,619,718,857,1054,1335,1742],
               [280,288,306,334,376,436,521, 641, 812,1059],
               [340,350,371,405,456,529,632,777,984,1284]]

Reopening   =[[190,196,208,227,255,296,353,434,550,718],
              [150,155,164,179,201,233,278,342,433,565],
              [160,165,175,191,215,249,297,365,462,603],
              [100,103,109,119,134,155,185,228,289,377],
              [130,134,142,155,174,202,241,296,375,489]]

AlloyCost=  [[0.094,0.09682,0.102716338,0.112240916,0.12632814,0.146448937,0.17486769,0.215065202,0.272438163,0.355470009],
             [0.094,0.09682,0.102716338,0.112240916,0.12632814,0.146448937,0.17486769,0.215065202,0.272438163,0.355470009],
             [0.094,0.09682,0.102716338,0.112240916,0.12632814,0.146448937,0.17486769,0.215065202,0.272438163,0.355470009],
             [0.094,0.09682,0.102716338,0.112240916,0.12632814,0.146448937,0.17486769,0.215065202,0.272438163,0.355470009],
             [0.094,0.09682,0.102716338,0.112240916,0.12632814,0.146448937,0.17486769,0.215065202,0.272438163,0.355470009]]
# alloy cost every 4.7 pounds >>>> use for cost objective

B3Cost= [[6030,7182,8334,9486,10638,11790,12942,14094,15246,16398],
         [6030,7182,8334,9486,10638,11790,12942,14094,15246,16398],
         [6030,7182,8334,9486,10638,11790,12942,14094,15246,16398],
         [6030,7182,8334,9486,10638,11790,12942,14094,15246,16398],
         [6030,7182,8334,9486,10638,11790,12942,14094,15246,16398]]


plants = range(len(capacity))
retail = range(len(Demand))
warehouses = range(len(WHRetailCost))
time=range(len(Year))


m = gp.Model("Final") #Notepad check


######################################################
################# Variables ##########################

# continuous variables here below
xvars = m.addVars(plants, warehouses, time, vtype=GRB.CONTINUOUS, obj =PlantWHCost , name = "x")
yvars = m.addVars(warehouses, retail, time, vtype=GRB.CONTINUOUS, obj=WHRetailCost, name = "y")
vvars = m.addVars(warehouses, time, vtype=GRB.CONTINUOUS, name = "v")
avars = m.addVars(plants, time, vtype=GRB.CONTINUOUS, obj=AlloyCost, name = "a")

# binary variables here below
zvars = m.addVars(plants, time, vtype=GRB.BINARY, obj = Construction, lb = 0, ub = 1,  name = "zvar")
nvars = m.addVars(plants, time, vtype=GRB.BINARY, obj = Operating, lb = 0, ub = 1,  name = "nvar")
hvars = m.addVars(plants, time, vtype=GRB.BINARY, obj = Reopening, lb = 0, ub = 1,  name = "hvar")
gvars = m.addVars(plants, time, vtype=GRB.BINARY, obj = Shutdown, lb = 0, ub = 1,  name = "gvar")

B1vars = m.addVars(plants, time, vtype=GRB.CONTINUOUS, obj=0,name = "B1var")
B2vars = m.addVars(plants, time, vtype=GRB.CONTINUOUS, obj=1350,name = "B2var")
B3vars = m.addVars(plants, time, vtype=GRB.CONTINUOUS, obj=B3Cost,name = "B3var")
L1vars = m.addVars(plants, vtype=GRB.BINARY, name = "L1var")
L2vars = m.addVars(plants, vtype=GRB.BINARY, name = "L2var")

m.modelSense = GRB.MINIMIZE



####################################################
##################  Constraints ####################

# Demand and Capacity Constraints
m.addConstrs((yvars.sum('*', k,t) >= Demand[k][t] for k in retail for t in time), "Demand")
m.addConstrs((xvars.sum(i,'*',t) <= capacity[i]*nvars[i,t] for i in plants for t in time), "Plant Capacity")


# Binary Constraints for plants
m.addConstrs((zvars.sum(i,'*') >= nvars[i,t] for i in plants for t in time), "Construction Status") #not sure about "*" in nvars fpr t
m.addConstrs((nvars[i,t-1]-nvars[i,t]<= gvars[i,t] for i in plants for t in time if t>=1 ), "Shutdown Status")
m.addConstrs((nvars[i,t]-nvars[i,t-1] <= hvars[i,t]+zvars[i,t] for i in plants for t in time if t>=2), "Reopening Status1")
m.addConstrs((hvars[i,t]+zvars[i,t]<=1 for i in plants for t in time if t>=2), "Reopening Status2")
m.addConstrs((zvars.sum(i,'*') <= 1 for i in plants), "Construction Limit")
m.addConstrs((hvars.sum(i,'*') <= 4 for i in plants), "Reopening Limit")
m.addConstrs((gvars.sum(i,'*') <= 5 for i in plants), "Shutdown Limit")


# Storage Constraints
m.addConstrs((xvars.sum('*',j,t)+vvars[j,t-1] == yvars.sum(j,'*',t)+vvars[j,t] for j in warehouses for t in time if t>=1), "Balance Node")
m.addConstrs((xvars.sum('*',j,t) == yvars.sum(j,'*',t)+vvars[j,t] for j in warehouses for t in time if t==0), "Balance Node")

m.addConstrs(((vvars[j,t-1]+vvars[j,t])/2 <= 4000 for j in warehouses for t in time if t>=1), "Inventory Limit")
m.addConstrs((xvars.sum('*',j,t) <= 12000 for j in warehouses for t in time), "Flow-in Limit")
m.addConstrs((yvars.sum('*',k,t) <= 12000 for k in retail for t in time), "Flow-out Limit")


# Alloy Constraints
m.addConstrs((xvars[i,j,t] <= 12765.957447 for i in plants for j in warehouses for t in time), "Limit for alloy")
m.addConstrs((xvars.sum(i,'*',t) == avars[i,t] for i in plants for t in time), "Alloy production")

# Binary Widgets Constraints
m.addConstrs((B1vars[i,t]+B2vars[i,t]+B3vars[i,t] == 1 for i in plants for t in time), "Bvar")
m.addConstrs((L1vars[i]+L2vars[i] == 1 for i in plants for t in time), "Lvar")
m.addConstrs((B1vars[i,t] <= L1vars[i] for i in plants for t in time), "segment1")
m.addConstrs((B2vars[i,t] <= L1vars[i]+L2vars[i] for i in plants for t in time), "segment2")
m.addConstrs((B3vars[i,t] <= L2vars[i] for i in plants for t in time), "segment3")

m.write('Final.lp')
# Optimize Model
m.optimize()



#######################################################
################ PrintSolution() ######################

# Objective Function Value
print('\nTotal Costs: %g' % m.objVal)


# Solution (Variable Values):
print('From PLANT TO WAREHOUSE:')
for i in plants:
   for j in warehouses:
       for t in time:
            if xvars[i,j,t].x > 0:
                print('For year %g, Plant %s open, Transport %g units to warehouse %s.' % (((t+1),(i+1),xvars[i,j,t].x, (j+1))))
            else:
                print('For year %g, Plant %s closed, no shipping to warehouses %s.' % ((t+1),(i+1),(j+1)))

print('\n\n\nFrom WAREHOUSE TO RETAIL:')
for j in warehouses:
   for k in retail:
       for t in time:
            if yvars[j,k,t].x > 0:
                print('For year %g, warehouse %s Transport %g units to retail %s.' % (((t+1),(j+1),yvars[j,k,t].x, (k+1))))
            else:
                print('For year %g, warehouse %r DOES NOT transport to retail %g.' % ((t+1),(j+1),(k+1)))


print('\n\n\nINVENTORY:')
for j in warehouses:
   for t in time:
       print('For year %g, warehouse %s has %g units to of inventory.' % (((t+1),(j+1),vvars[j,t].x)))

